{"0": {"id": "value:61a0d6b5-a66d-4905-9cfe-ea22e97c32e3", "desc": {"data_type": "table", "label": "[this value]", "node_type": "value", "data_type_config": {}, "level": 1}, "parentIds": ["module:zdpuB2ALrSdL5krY8pUqvjZS9GFdpm27RLmFsrAiHRYHXFSBY"], "info": {"preview": "date\tcontent\tfile_name\t\n1917-04-25 00:00:00\tLA RAGIONE\tsn84037024_1917-04-25_ed-1_seq-1_ocr.txt\t\n1917-04-25 00:00:00\tLA RAG ONE\tsn84037024_1917-04-25_ed-2_seq-1_ocr.txt\t\n1917-04-25 00:00:00\tLA RAGIONE\tsn84037024_1917-04-25_ed-3_seq-1_ocr.txt\t\n1917-04-25 00:00:00\tcontro i vili, i camorristi, i sicari, i falsari e gli austriacanti, nemici della patria di e di quella d adozione.\tsn84037024_1917-04-25_ed-4_seq-1_ocr.txt\t\n1917-05-05 00:00:00\tcontro i vili, i camorristi, i sicari, i falsari e gli austriacanti, nemici della patria di origine e di quella d' adozione\tsn84037024_1917-05-05_ed-1_seq-1_ocr.txt\t\n1917-05-05 00:00:00\tLA RAGIONA\tsn84037024_1917-05-05_ed-2_seq-1_ocr.txt\t\n1917-05-05 00:00:00\tLA RAGIONE\tsn84037024_1917-05-05_ed-3_seq-1_ocr.txt\t\n1917-05-05 00:00:00\tLA RAGIONE\tsn84037024_1917-05-05_ed-4_seq-1_ocr.txt\t\n1917-05-16 00:00:00\tcontro i vili, i camorristi, i sicari, i falsari e gli austriacanti, nemici della patria di origine e di quella d'adozione\tsn84037024_1917-05-16_ed-1_seq-1_ocr.txt\t\n1917-05-16 00:00:00\tLA RAG ONE\tsn84037024_1917-05-16_ed-2_seq-1_ocr.txt\t\n1917-05-16 00:00:00\tcontro 1 vili, i camorristi, i sicari, i falsari e gli austriacanti, nemici della patria di origine e di quella d'adozione.\tsn84037024_1917-05-16_ed-3_seq-1_ocr.txt\t\n1917-04-07 00:00:00\t\u25a0\u25a0\u25a0\tsn84037025_1917-04-07_ed-1_seq-1_ocr.txt\t\n1917-04-14 00:00:00\tLa Rassegna\tsn84037025_1917-04-14_ed-1_seq-1_ocr.txt\t\n1917-04-14 00:00:00\tBoth Phones\tsn84037025_1917-04-14_ed-2_seq-1_ocr.txt\t\n1917-04-21 00:00:00\t\u25a0 jSr\u00ect** W?? iIK 38\u00aef- i^M\tsn84037025_1917-04-21_ed-1_seq-1_ocr.txt\t\n1917-04-21 00:00:00\t\u25a0Both Phones\tsn84037025_1917-04-21_ed-2_seq-1_ocr.txt\t\n"}}, "1": {"id": "module:zdpuB2ALrSdL5krY8pUqvjZS9GFdpm27RLmFsrAiHRYHXFSBY", "desc": {"module_type": "table.merge", "module_config": {"constants": {}, "defaults": {}, "inputs_schema": {"source_table": {"type": "table", "type_config": {}, "default": "__not_set__", "optional": false, "is_constant": false, "doc": {"description": "The original table.", "doc": null}}, "date_array": {"type": "array", "type_config": {}, "default": "__not_set__", "optional": false, "is_constant": false, "doc": {"description": "The array containing the parsed date items.", "doc": null}}}, "column_map": {"date": "date_array", "content": "source_table.content", "file_name": "source_table.file_name"}}, "label": "table.merge", "node_type": "operation", "level": 3}, "parentIds": ["module:zdpuArpt7nEePiT92nLRVgdnCsgvCQC4g5GPgEaNZypzQHi5w", "module:zdpuAvi4xgxrSfQgdRXW4XWjKCcg7Zj2podrwnXbQmXEPcjY5"], "info": {"type_name": "table.merge", "documentation": {"description": "Create a table from other tables and/or arrays.", "doc": "This module needs configuration to be set (for now). It's currently not possible to merge an arbitrary\nnumber of tables/arrays, all tables to be merged must be specified in the module configuration.\n\nColumn names of the resulting table can be controlled by the 'column_map' configuration, which takes the\ndesired column name as key, and a field-name in the following format as value:\n- '[inputs_schema key]' for inputs of type 'array'\n- '[inputs_schema_key].orig_column_name' for inputs of type 'table'"}, "authors": {"authors": [{"name": "Markus Binsteiner", "email": "markus@frkl.io"}]}, "context": {"references": {"source_repo": {"url": "https://github.com/DHARPA-Project/kiara_plugin.tabular", "desc": "The module package git repository."}, "documentation": {"url": "https://DHARPA-Project.github.io/kiara_plugin.tabular/", "desc": "The url for the module package documentation."}}, "tags": ["tabular"], "labels": {"package": "kiara_plugin.tabular"}}, "python_class": {"python_class_name": "MergeTableModule", "python_module_name": "kiara_plugin.tabular.modules.table", "full_name": "kiara_plugin.tabular.modules.table.MergeTableModule"}, "process_src": "def process(self, inputs: ValueMap, outputs: ValueMap, job_log: JobLog) -> None:\n\n    import pyarrow as pa\n\n    inputs_schema: Dict[str, Any] = self.get_config_value(\"inputs_schema\")\n    column_map: Dict[str, str] = self.get_config_value(\"column_map\")\n\n    sources = {}\n    for field_name in inputs_schema.keys():\n        sources[field_name] = inputs.get_value_data(field_name)\n\n    len_dict = {}\n    arrays = {}\n\n    column_map_final = dict(column_map)\n\n    for source_key, table_or_array in sources.items():\n\n        if isinstance(table_or_array, KiaraTable):\n            rows = table_or_array.num_rows\n            for name in table_or_array.column_names:\n                array_name = f\"{source_key}.{name}\"\n                if column_map and array_name not in column_map.values():\n                    job_log.add_log(\n                        f\"Ignoring column '{name}' of input table '{source_key}': not listed in column_map.\"\n                    )\n                    continue\n\n                column = table_or_array.arrow_table.column(name)\n                arrays[array_name] = column\n                if not column_map:\n                    if name in column_map_final:\n                        raise Exception(\n                            f\"Can't merge table, duplicate column name: {name}.\"\n                        )\n                    column_map_final[name] = array_name\n\n        elif isinstance(table_or_array, KiaraArray):\n\n            if column_map and source_key not in column_map.values():\n                job_log.add_log(\n                    f\"Ignoring array '{source_key}': not listed in column_map.\"\n                )\n                continue\n\n            rows = len(table_or_array)\n            arrays[source_key] = table_or_array.arrow_array\n\n            if not column_map:\n                if source_key in column_map_final.keys():\n                    raise Exception(\n                        f\"Can't merge table, duplicate column name: {source_key}.\"\n                    )\n                column_map_final[source_key] = source_key\n\n        else:\n            raise KiaraProcessingException(\n                f\"Can't merge table: invalid type '{type(table_or_array)}' for source '{source_key}'.\"\n            )\n\n        len_dict[source_key] = rows\n\n    all_rows = None\n    for source_key, rows in len_dict.items():\n        if all_rows is None:\n            all_rows = rows\n        else:\n            if all_rows != rows:\n                all_rows = None\n                break\n\n    if all_rows is None:\n        len_str = \"\"\n        for name, rows in len_dict.items():\n            len_str = f\" {name} ({rows})\"\n\n        raise KiaraProcessingException(\n            f\"Can't merge table, sources have different lengths: {len_str}\"\n        )\n\n    column_names = []\n    columns = []\n    for column_name, ref in column_map_final.items():\n        column_names.append(column_name)\n        column = arrays[ref]\n        columns.append(column)\n\n    table = pa.Table.from_arrays(arrays=columns, names=column_names)\n\n    outputs.set_value(\"table\", table)\n", "config": {"python_class": {"python_class_name": "MergeTableConfig", "python_module_name": "kiara_plugin.tabular.modules.table", "full_name": "kiara_plugin.tabular.modules.table.MergeTableConfig"}, "config_values": {"constants": {"description": "Value constants for this module.", "type": "object", "value_default": {}, "required": false}, "defaults": {"description": "Value defaults for this module.", "type": "object", "value_default": {}, "required": false}, "inputs_schema": {"description": "A dict describing the inputs for this merge process.", "type": "object", "value_default": null, "required": true}, "column_map": {"description": "A map describing", "type": "object", "value_default": {}, "required": false}}}}}, "2": {"id": "module:zdpuArpt7nEePiT92nLRVgdnCsgvCQC4g5GPgEaNZypzQHi5w", "desc": {"module_type": "parse.date_array", "module_config": {"constants": {}, "defaults": {}, "add_inputs": true, "input_fields": [], "force_non_null": true, "min_index": null, "max_index": null, "remove_tokens": []}, "label": "parse.date_array", "node_type": "operation", "level": 5}, "parentIds": ["module:zdpuAu23Tw6FBJ1TVHKE2MXcyKcRKgyAycXhhPba1FQxWTaRS", "value:c6116ca6-555d-4604-94eb-909d7fd7e76c", "value:9d51fcd7-56c7-4256-ba30-20cf0669b75e", "value:fc4d1730-5d00-4785-b29a-e4d3bcd35755", "value:2511d967-c418-46d8-87a5-51436786fc42"], "info": {"type_name": "parse.date_array", "documentation": {"description": "Create an array of date objects from an array of strings.", "doc": "This module is very simplistic at the moment, more functionality and options will be added in the future.\n\nAt its core, this module uses the standard parser from the\n[dateutil](https://github.com/dateutil/dateutil) package to parse strings into dates. As this parser can't handle\n complex strings, the input strings can be pre-processed in the following ways:\n\n- 'cut' non-relevant parts of the string (using 'min_index' & 'max_index' input/config options)\n- remove matching tokens from the string, and replace them with a single whitespace (using the 'remove_tokens' option)\n\nBy default, if an input string can't be parsed this module will raise an exception. This can be prevented by\nsetting this modules 'force_non_null' config option or input to 'False', in which case un-parsable strings\nwill appear as 'NULL' value in the resulting array."}, "authors": {"authors": [{"name": "Markus Binsteiner", "email": "markus@frkl.io"}]}, "context": {"references": {"source_repo": {"url": "https://github.com/DHARPA-Project/kiara_plugin.tabular", "desc": "The module package git repository."}, "documentation": {"url": "https://DHARPA-Project.github.io/kiara_plugin.tabular/", "desc": "The url for the module package documentation."}}, "tags": ["tabular"], "labels": {"package": "kiara_plugin.tabular"}}, "python_class": {"python_class_name": "ExtractDateModule", "python_module_name": "kiara_plugin.tabular.modules.array", "full_name": "kiara_plugin.tabular.modules.array.ExtractDateModule"}, "process_src": "def process(self, inputs: ValueMap, outputs: ValueMap, job_log: JobLog):\n\n    import polars as pl\n    import pyarrow as pa\n    from dateutil import parser\n\n    force_non_null: bool = self.get_data_for_field(\n        field_name=\"force_non_null\", inputs=inputs\n    )\n    min_pos: Union[None, int] = self.get_data_for_field(\n        field_name=\"min_index\", inputs=inputs\n    )\n    if min_pos is None:\n        min_pos = 0\n    max_pos: Union[None, int] = self.get_data_for_field(\n        field_name=\"max_index\", inputs=inputs\n    )\n    remove_tokens: Iterable[str] = self.get_data_for_field(\n        field_name=\"remove_tokens\", inputs=inputs\n    )\n\n    def parse_date(_text: str):\n\n        text = _text\n        if min_pos:\n            try:\n                text = text[min_pos:]  # type: ignore\n            except Exception:\n                return None\n        if max_pos:\n            try:\n                text = text[0 : max_pos - min_pos]  # type: ignore  # noqa\n            except Exception:\n                pass\n\n        if remove_tokens:\n            for t in remove_tokens:\n                text = text.replace(t, \" \")\n\n        try:\n            d_obj = parser.parse(text, fuzzy=True)\n        except Exception as e:\n            if force_non_null:\n                raise KiaraProcessingException(e)\n            return None\n\n        if d_obj is None:\n            if force_non_null:\n                raise KiaraProcessingException(\n                    f\"Can't parse date from string: {text}\"\n                )\n            return None\n\n        return d_obj\n\n    value = inputs.get_value_obj(\"array\")\n    array: KiaraArray = value.data\n\n    series = pl.Series(name=\"tokens\", values=array.arrow_array)\n    job_log.add_log(f\"start parsing date for {len(array)} items\")\n    result = series.apply(parse_date)\n    job_log.add_log(f\"finished parsing date for {len(array)} items\")\n    result_array = result.to_arrow()\n\n    # TODO: remove this cast once the array data type can handle non-chunked arrays\n    chunked = pa.chunked_array(result_array)\n    outputs.set_values(date_array=chunked)\n", "config": {"python_class": {"python_class_name": "ExtractDateConfig", "python_module_name": "kiara_plugin.tabular.modules.array", "full_name": "kiara_plugin.tabular.modules.array.ExtractDateConfig"}, "config_values": {"constants": {"description": "Value constants for this module.", "type": "object", "value_default": {}, "required": false}, "defaults": {"description": "Value defaults for this module.", "type": "object", "value_default": {}, "required": false}, "add_inputs": {"description": "If set to 'True', parse options will be available as inputs.", "type": "boolean", "value_default": true, "required": false}, "input_fields": {"description": "If not empty, only add the fields specified in here to the module inputs schema.", "type": "array", "value_default": [], "required": false}, "force_non_null": {"description": "If set to 'True', raise an error if any of the strings in the array can't be parsed.", "type": "boolean", "value_default": true, "required": false}, "min_index": {"description": "The minimum index from where to start parsing the string(s).", "type": "integer", "value_default": null, "required": false}, "max_index": {"description": "The maximum index until whic to parse the string(s).", "type": "integer", "value_default": null, "required": false}, "remove_tokens": {"description": "A list of tokens/characters to replace with a single white-space before parsing the input.", "type": "array", "value_default": [], "required": false}}}}}, "3": {"id": "module:zdpuAu23Tw6FBJ1TVHKE2MXcyKcRKgyAycXhhPba1FQxWTaRS", "desc": {"module_type": "table.cut_column", "module_config": {"constants": {}, "defaults": {}}, "label": "table.cut_column", "node_type": "operation", "level": 7}, "parentIds": ["value:ed363f16-e4d8-4fbf-93ff-d12f3a4e417a", "module:zdpuAvi4xgxrSfQgdRXW4XWjKCcg7Zj2podrwnXbQmXEPcjY5"], "info": {"type_name": "table.cut_column", "documentation": {"description": "Cut off one column from a table, returning an array.", "doc": null}, "authors": {"authors": [{"name": "Markus Binsteiner", "email": "markus@frkl.io"}]}, "context": {"references": {"source_repo": {"url": "https://github.com/DHARPA-Project/kiara_plugin.tabular", "desc": "The module package git repository."}, "documentation": {"url": "https://DHARPA-Project.github.io/kiara_plugin.tabular/", "desc": "The url for the module package documentation."}}, "tags": ["tabular"], "labels": {"package": "kiara_plugin.tabular"}}, "python_class": {"python_class_name": "CutColumnModule", "python_module_name": "kiara_plugin.tabular.modules.table", "full_name": "kiara_plugin.tabular.modules.table.CutColumnModule"}, "process_src": "def process(self, inputs: ValueMap, outputs: ValueMap) -> None:\n\n    import pyarrow as pa\n\n    column_name: str = inputs.get_value_data(\"column_name\")\n\n    table_value: Value = inputs.get_value_obj(\"table\")\n    table_metadata: KiaraTableMetadata = table_value.get_property_data(\n        \"metadata.table\"\n    )\n\n    available = table_metadata.table.column_names\n\n    if column_name not in available:\n        raise KiaraProcessingException(\n            f\"Invalid column name '{column_name}'. Available column names: {', '.join(available)}\"\n        )\n\n    table: pa.Table = table_value.data.arrow_table\n    column = table.column(column_name)\n\n    outputs.set_value(\"array\", column)\n", "config": {"python_class": {"python_class_name": "KiaraModuleConfig", "python_module_name": "kiara.models.module", "full_name": "kiara.models.module.KiaraModuleConfig"}, "config_values": {"constants": {"description": "Value constants for this module.", "type": "object", "value_default": {}, "required": false}, "defaults": {"description": "Value defaults for this module.", "type": "object", "value_default": {}, "required": false}}}}}, "4": {"id": "value:ed363f16-e4d8-4fbf-93ff-d12f3a4e417a", "desc": {"label": "column_name (string)", "node_type": "value", "data_type": "string", "data_type_config": {}, "level": 8}, "parentIds": [], "info": {"preview": "file_name"}}, "5": {"id": "module:zdpuAvi4xgxrSfQgdRXW4XWjKCcg7Zj2podrwnXbQmXEPcjY5", "desc": {"module_type": "create.table", "module_config": {"constants": {}, "defaults": {}, "source_type": "text_file_bundle", "target_type": "table", "ignore_errors": false}, "label": "create.table", "node_type": "operation", "level": 5}, "parentIds": ["module:zdpuAt9UNbdmV11JRozti4R1HDa1JUBjpWztCgE8xH6jix1fr"], "info": {"type_name": "create.table", "documentation": {"description": "-- n/a --", "doc": null}, "authors": {"authors": [{"name": "Markus Binsteiner", "email": "markus@frkl.io"}]}, "context": {"references": {"source_repo": {"url": "https://github.com/DHARPA-Project/kiara_plugin.tabular", "desc": "The module package git repository."}, "documentation": {"url": "https://DHARPA-Project.github.io/kiara_plugin.tabular/", "desc": "The url for the module package documentation."}}, "tags": ["tabular"], "labels": {"package": "kiara_plugin.tabular"}}, "python_class": {"python_class_name": "CreateTableModule", "python_module_name": "kiara_plugin.tabular.modules.table", "full_name": "kiara_plugin.tabular.modules.table.CreateTableModule"}, "process_src": "def process(self, inputs: ValueMap, outputs: ValueMap) -> None:\n\n    source_type = self.get_config_value(\"source_type\")\n    target_type = self.get_config_value(\"target_type\")\n\n    func_name = f\"create__{target_type}__from__{source_type}\"\n    func = getattr(self, func_name)\n\n    source_value = inputs.get_value_obj(source_type)\n\n    signature = inspect.signature(func)\n    if \"optional\" in signature.parameters:\n        optional: Dict[str, Value] = {}\n        op_schemas = {}\n        for field, schema in self.inputs_schema.items():\n            if field == source_type:\n                continue\n            optional[field] = inputs.get_value_obj(field)\n            op_schemas[field] = schema\n        result = func(\n            source_value=source_value,\n            optional=ValueMapReadOnly(\n                value_items=optional, values_schema=op_schemas\n            ),\n        )\n    else:\n        result = func(source_value=source_value)\n    outputs.set_value(target_type, result)\n", "config": {"python_class": {"python_class_name": "CreateTableModuleConfig", "python_module_name": "kiara_plugin.tabular.modules.table", "full_name": "kiara_plugin.tabular.modules.table.CreateTableModuleConfig"}, "config_values": {"constants": {"description": "Value constants for this module.", "type": "object", "value_default": {}, "required": false}, "defaults": {"description": "Value defaults for this module.", "type": "object", "value_default": {}, "required": false}, "source_type": {"description": "The value type of the source value.", "type": "string", "value_default": null, "required": true}, "target_type": {"description": "The value type of the target.", "type": "string", "value_default": null, "required": true}, "ignore_errors": {"description": "Whether to ignore convert errors and omit the failed items.", "type": "boolean", "value_default": false, "required": false}}}}}, "6": {"id": "module:zdpuAt9UNbdmV11JRozti4R1HDa1JUBjpWztCgE8xH6jix1fr", "desc": {"module_type": "import.file_bundle", "module_config": {"constants": {}, "defaults": {}}, "label": "import.file_bundle", "node_type": "operation", "level": 7}, "parentIds": ["value:1e8c178b-cba3-40a7-bf81-e0524fbd49ff"], "info": {"type_name": "import.file_bundle", "documentation": {"description": "Import a folder (file_bundle) from the local filesystem.", "doc": null}, "authors": {"authors": [{"name": "Markus Binsteiner", "email": "markus@frkl.io"}]}, "context": {"references": {"source_repo": {"url": "https://github.com/DHARPA-Project/kiara", "desc": "The kiara project git repository."}, "documentation": {"url": "https://dharpa.org/kiara_documentation/", "desc": "The url for kiara documentation."}}, "tags": [], "labels": {"package": "kiara"}}, "python_class": {"python_class_name": "ImportFileBundleModule", "python_module_name": "kiara.modules.included_core_modules.filesystem", "full_name": "kiara.modules.included_core_modules.filesystem.ImportFileBundleModule"}, "process_src": "def process(self, inputs: ValueMap, outputs: ValueMap):\n\n    path = inputs.get_value_data(\"path\")\n\n    file_bundle = FileBundle.import_folder(source=path)\n    outputs.set_value(\"file_bundle\", file_bundle)\n", "config": {"python_class": {"python_class_name": "KiaraModuleConfig", "python_module_name": "kiara.models.module", "full_name": "kiara.models.module.KiaraModuleConfig"}, "config_values": {"constants": {"description": "Value constants for this module.", "type": "object", "value_default": {}, "required": false}, "defaults": {"description": "Value defaults for this module.", "type": "object", "value_default": {}, "required": false}}}}}, "7": {"id": "value:1e8c178b-cba3-40a7-bf81-e0524fbd49ff", "desc": {"label": "path (string)", "node_type": "value", "data_type": "string", "data_type_config": {}, "level": 8}, "parentIds": [], "info": {"preview": "/Users/mariella.decrouychan/Documents/GitHub/DHARPA-Project-viz-observable/dag-lineage/example_data/mini_corpus"}}, "8": {"id": "value:c6116ca6-555d-4604-94eb-909d7fd7e76c", "desc": {"label": "force_non_null (boolean)", "node_type": "value", "data_type": "boolean", "data_type_config": {}, "level": 6}, "parentIds": [], "info": {"preview": "True"}}, "9": {"id": "value:9d51fcd7-56c7-4256-ba30-20cf0669b75e", "desc": {"label": "max_index (integer)", "node_type": "value", "data_type": "integer", "data_type_config": {}, "level": 6}, "parentIds": [], "info": {"preview": "21"}}, "10": {"id": "value:fc4d1730-5d00-4785-b29a-e4d3bcd35755", "desc": {"label": "min_index (integer)", "node_type": "value", "data_type": "integer", "data_type_config": {}, "level": 6}, "parentIds": [], "info": {"preview": "11"}}, "11": {"id": "value:2511d967-c418-46d8-87a5-51436786fc42", "desc": {"label": "remove_tokens (list)", "node_type": "value", "data_type": "list", "data_type_config": {}, "level": 6}, "parentIds": [], "info": {"preview": "list_data=[] item_schema={'title': 'list', 'type': 'object'} python_class=PythonClass(model_id=list, category=instance.wrapped_python_class, fields=[python_class_name, python_module_name, full_name])"}}}